<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Random blog</title>
    <link>https://ramaxlo.github.io/blog/post/</link>
    <description>Recent content in Posts on Random blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <copyright>&amp;copy; Ramax Lo 2020</copyright>
    <lastBuildDate>Mon, 31 Aug 2020 14:12:14 +0800</lastBuildDate>
    
	<atom:link href="https://ramaxlo.github.io/blog/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>入手 ThinkPad T14s AMD Gen1</title>
      <link>https://ramaxlo.github.io/blog/post/t14s-gen1/</link>
      <pubDate>Mon, 31 Aug 2020 14:12:14 +0800</pubDate>
      
      <guid>https://ramaxlo.github.io/blog/post/t14s-gen1/</guid>
      <description>自從入手 T450 使用到現在也已過了五年 (時間真的過得很快)，除了在保固內換過一次硬碟外，幾乎沒再出過什麼問題。看著每年一代又一代的 T 系列推陳出新，原本是打算再戰個 2~3 年再換的，不過由於今年發布的消息說將會出搭載 AMD Ryzen Pro 4000 系列的 T 系列，心中真是一陣雀躍。接著等到了今年下半年才在官網上架。搭載 Ryzen 7、16G ram、512G SSD 的機型大約 37000 出頭，足足比對應的 intel 版本要便宜個 8~9k，心想這真是香啊，於是索性就下訂了。
等了約 3 週到貨後，立馬安裝 openSUSE Tumbleweed，安裝過程就不多加贅述。雖然是滾動版本，但安裝過程其實相當平順，沒有什麼大問題，檔案系統也從過去習慣的 LVM + ext4 改成全面使用 Btrfs。安裝完成後，大部分的硬體都可以偵測到並加以驅動。當然畢竟還是相當新的硬體，仍然會有一些小問題發生，在此條列如下：
 有線網路 (rtl8168) 可以正常驅動，然而在插入網路線的時候，驅動程式似乎無法偵測網路線插入。 必須要先進休眠狀態後，插入網路線，再喚醒才能偵測。 由於目前 Tumbleweed 使用的核心版本為 5.8.0，Virtualbox 6.1.12 無法在該版本上正常運作。詳情見 Bugzilla 的討論。 FnLock 的燈號不會根據目前狀態亮滅 無法正常休眠，也就是休眠後，燈號不會轉成呼吸燈，CPU 也還在運轉狀態。後來在論壇上找到解法，必須先進 bios 中的 config -&amp;gt; power -&amp;gt; sleep state 設定，將 Windows10 改為 Linux。  最後花了幾天時間將在舊機器的資料搬移過來，就開始做為正式的工作機了。相信上述的小問題會因為驅動程式的陸續更新而慢慢解決。</description>
    </item>
    
    <item>
      <title>使用 APU2 架設家庭路由器</title>
      <link>https://ramaxlo.github.io/blog/post/apu2-home-router/</link>
      <pubDate>Sat, 09 Mar 2019 22:21:19 +0800</pubDate>
      
      <guid>https://ramaxlo.github.io/blog/post/apu2-home-router/</guid>
      <description>有鑑於家中網路使用的頻寬分享器主要是由 ISP 所提供，其設備老舊，缺乏韌體更新，也缺少一些更進階的設定，讓我覺得該是時候將路由器的角色改由我最近把玩的 APU2 來代替，而原本的設備則單純做為 PPPoE relay 的角色。因此我將家中網路架構做了改變如下：
 使用 APU2 透過 PPPoE 撥接至 ISP，並做為對外網路的唯一介面 LAN 端電腦透過 switch 接至 APU2 的 LAN port 將原本設備的 virtual server 設定搬移至 APU2 架設 Wireguard VPN，並關閉對外的 web 與 sftp port 啟動 DNS forwarder 設定 zone based firewall，讓防火牆設定更容易管理  當然在轉換過程中也碰到了一些之前沒遇到的問題：
 由於 PPPoE header 會佔用 8 byte 的長度，因此 TCP MSS (Maximum segmemnt size) 必須要減掉 8 byte，否則封包會傳不出去。詳情可見這個文章。VyOS 的設定在此。 原本想設定路由器作為 wifi ap，然而測試後發現只能設定為 11n 模式，且速率並不是很理想，另外還有相容性的問題，因此還是決定使用現成的 wifi ap 來架設無線網路。  架設完成後，使用上並不會感覺到網路速度有受到什麼影響，不過現在網路設定更容易維護，且路由軟體也可以很容易地升級 (畢竟是開放源碼系統)，算是一舉數得。</description>
    </item>
    
    <item>
      <title>VyOS 發布方式改變</title>
      <link>https://ramaxlo.github.io/blog/post/vyos-model-change/</link>
      <pubDate>Wed, 06 Feb 2019 15:42:36 +0800</pubDate>
      
      <guid>https://ramaxlo.github.io/blog/post/vyos-model-change/</guid>
      <description>這一篇文章其實是在 1.2 版發布前所寫的，有別於技術細節，這個比較是在談關於 VyOS 這個專案的未來走向，因此特別另外開新的文章來討論這個部分。
之前有提到過，其實 VyOS 是個挺小眾的專案。在 DistroWatch 的排名第 77 位，在 google trend 上的搜尋熱度也遠遠不如 PfSense。這些 VyOS 的使用者主要分為二類；一類是網路玩家，喜歡測試新功能甚於穩定性，主要會在家中或實驗室建置網路，或是某些小公司也可以用得很高興。另外一類則是大企業的網管人員，他們以穩定性為最高指導原則，所以如果新版本不夠穩定，他們是不會花時間升級的。
以 VyOS 專案來說，大部分的使用者屬於第二類使用者，因此維護者們必須小心地測試新版本以確保新的修改不會造成任何的副作用，但這也意味著新版本發布週期會拉的很長，使得玩家們遲遲等不到新功能來測試並回報問題。另外一方面，第二類使用者在使用之餘，幾乎對該專案本身沒有任何實質上的貢獻；他們只是用，也不回報問題，也沒付錢買服務，但又要求要穩定，這對於只有少數開發者與貢獻者1的專案來說，不是一個健康的情況。
因此，基於以上的理由，VyOS 決定要改變發布新版本的方式：
 提供滾動式版本 (rolling release) 給想要嘗鮮的玩家們測試，並且開發者能夠在短時間內測試他們貢獻的新功能。 提供長期支援版本 (Long Term Support, LTS) 給企業用戶使用。LTS 版本會有二年的維護週期，在這期間內，維護者會持續測試並加入新的 bugfix 與安全更新。  然而與滾動式版本另外的不同處則是，滾動式版本的映象檔可以自由下載，LTS 版本的則只提供給付費用戶下載。也就是說，若你是企業用戶且又不想花時間自己 build LTS 版的映象檔，那麼就請花錢訂閱服務以取得更新。為了怕人誤解，以為 VyOS 又要走回 Vyatta 的老路，作者還強調你永遠可以自己 build 出 LTS 版的 iso 檔。
此外，作者也開放貢獻者方案，也就是若你過去曾經貢獻過 VyOS 專案，那麼你可以免費得到 LTS iso 訂閱服務 (小弟也很不要臉地去要了一個 XD)。
當然有些細節部分這裡就略過不提，我個人認為這樣的安排是合理的，畢竟在現在如此冷門的情況下，如果缺乏商業資金的挹注，開源專案就必須靠著眾人的熱情持續下去。然而熱情能夠持續多久又是個問題…若能夠利用付費服務的方式來贊助專案的開發，至少開發者們不用為了生計問題傷腦筋，也才有更多心力花在專案上。雖然我並不是對這個專案很有愛，但我很喜歡它命令列的設定方式，算是除了 RouterOS 外的開源替代品。真的希望它能夠繼續活下去…
  作者提到，在某一個大型模組中，過去五年有貢獻程式碼的人不超過 50 個。 &amp;#x21a9;&amp;#xfe0e;</description>
    </item>
    
    <item>
      <title>Upgrade VyOS on APU2 to Version 1.2</title>
      <link>https://ramaxlo.github.io/blog/post/vyos-apu2-12-update/</link>
      <pubDate>Wed, 06 Feb 2019 14:05:30 +0800</pubDate>
      
      <guid>https://ramaxlo.github.io/blog/post/vyos-apu2-12-update/</guid>
      <description>VyOS 下一個主要版本 1.2 終於在今年 1 月 28 號正式發布。1.2 版本究竟開發了多久，沒仔細查其實我也不很清楚，只知道應該開發了超過一年的時間…不過其實想想也是合理啦，這麼冷門的專案，人力不足是可以預期的…
雖然早已知道新版本出來了，我超想幫我的 APU2 升級的 (之前是跑 1.1.8)；然而由於工作忙碌的關係，一直抽不出一段空閒的時間來好好的弄一下。直到最近因為過年輪到我在公司值班，算是找到了一個好機會可以來玩玩。
相較於 1.1 版是在 Debian 6 上開發，1.2 版則是基於 Debian 8 做開發，也因此在 isolinux 以及其他的設定上有了比較大的差異，以至於之前在 Wiki 上的文件已不再適用於 1.2 版，需要再做更新。需要更新的部分如下：
 isolinux 的設定相較 1.1 有了很大的變化。供 serial port only 的機器使用的選項不見了，只有純 VGA console 的開機選單可用，因此這部分需要做比較大的修改以符合 APU2 的需求。 設定檔的格式從 1.1 升級到 1.2 有了比較大的修改，因此在 1.2 中有部分的 script 是在做格式轉換的工作。這部分的 baud rate 設定是寫死成 9600，故也需要做修改。 1.2 中安裝程式提供了一個 grub 設定檔的模版，這部分也是寫死成 9600，故需要做修改。  前前後後大概花了我二天的時間做修改與測試，總算是弄好了。這些修改我也一併更新到 Wiki 上，供同好參考。
註：自從上次把 1.1.7 的安裝步驟更新到 wiki 後，發現似乎愈來愈多人在論壇上問關於在 APU2 上安裝的問題…怎麼說呢…我覺得 APU2 真的是個好物啊，價格實惠 (網路上隨便一個 x86 的單板電腦，價格都差不多要比 APU2 貴上個四分之一以上)、效能夠用 (直上 300 / 100 沒問題)，再加上免費的 VyOS 簡直是絕配啊…真的很想把家中的分享器都換成 APU2 啊…</description>
    </item>
    
    <item>
      <title>SQLite3 的強健性考量</title>
      <link>https://ramaxlo.github.io/blog/post/sqlite3-redundancy/</link>
      <pubDate>Sat, 15 Sep 2018 16:07:43 +0800</pubDate>
      
      <guid>https://ramaxlo.github.io/blog/post/sqlite3-redundancy/</guid>
      <description>SQLite3 由於體積小、速度快，支援 SQL 語法，相信是眾多系統開發者心目中嵌入式小型資料庫的首選，敝公司當然也不例外。不過最近有時會發現有幾台安裝在客戶那的機器出現資料庫檔案寫壞的情況。雖然照著這裡所寫的步驟可以把一些記錄救回來，然而該資料庫儲存著錄影檔回放時所需要的時間區段記錄，按目前的程式邏輯，如果發現某個錄影檔在資料庫內沒有對應的記錄，那麼就會把該檔給刪除，以免佔用空間。
問題就出在這裡。從寫壞的資料庫所救回來的資料並不是完整的，勢必會缺少一些記錄，因此程式就會把不存在記錄的錄影檔給刪掉。有時所缺少的記錄橫跨了一個禮拜，那就表示會有一整個禮拜的歷史影像就只因為資料庫寫爛了，就被砍掉了。萬一有重要事件在這一段時間發生，客戶就再也無法調出來看了。這真的是很令人困擾的事。
我花了很多時間在研究為何資料庫檔案會被寫爛這件事。SQLite3 不同於一般的資料庫，它從一開始就是特別為了嵌入式的應用而設計，因此針對嵌入式系統中常見的插拔電情況設計了一套復原機制。從文件的解說中看來也確實是無懈可擊，不過這裡也提到了以下幾種可能會讓復原機制失效的情況：
 不良的檔案系統鎖定實作 不完整的磁碟寫入 (fsync()) 不完整的檔案刪除 其他存取資料庫的行程意外寫入了垃圾資料 Hot journal 被刪除或被改名  另外由於資料庫檔案是寫在 SD 卡中，還需要考慮 SD 卡寫壞的情況。
我想了很久，後來發現就算找出了原因，很有可能我也沒有時間與能力去修正 (不論是 SD 卡的問題或是檔案系統的問題)。那麼為何不乾脆使出強健系統的終極奧義呢？
何謂強健系統的終極奧義？概念超級簡單，就是多存幾份備份。君不見 RAID 不也是基於相同的概念嗎？只要想辦法將這些記錄在儲存於資料庫的同時，也將其備份分散存放在其他地方，那麼當資料庫壞掉時，系統就能夠再從這些地方取回紀錄以重建資料庫了。
似乎是個值得思考的方向。</description>
    </item>
    
    <item>
      <title>openSUSE Leap 42.3 AMI 上架</title>
      <link>https://ramaxlo.github.io/blog/post/opensuse_42.3_ami/</link>
      <pubDate>Fri, 13 Apr 2018 00:36:25 +0800</pubDate>
      
      <guid>https://ramaxlo.github.io/blog/post/opensuse_42.3_ami/</guid>
      <description>自從 openSUSE 將 42.2 的 AMI 放上 AWS Marketplace 後，就很久沒在更新了，害我想用 42.3 都還要自己用 Kiwi 建立映象檔再上傳到 AWS 上。不過最近終於把 42.3 給放上來了，趁著最近要開新機器，就來試用一下。
要啟動執行 openSUSE 的 instance 其實就跟執行 Ubuntu 的 instance 沒什麼兩樣，差別在於選擇 AMI 時要在 Community AMI 中選擇 openSUSE AMI。另外的差別就是預設帳號是 ec2-user，而不是大家習慣的 ubuntu。
實際使用起來並沒有什麼問題，這個 AMI 還很貼心地幫你把 Cloud:Tools 套件庫預先設定好，一些常用的工具如 aws-cli、google-cloud-sdk、azure-cli 等都可以直接安裝，不需要自行加入套件庫或是下載個別套件再安裝了，相當方便。想跑 docker？套件庫中已經直接提供 v17.09.1 了，不是最新的，但也算很新的了…</description>
    </item>
    
    <item>
      <title>ThinkPad X1 Carbon openSUSE Leap 安裝</title>
      <link>https://ramaxlo.github.io/blog/post/x1c-opensuse-leap-install/</link>
      <pubDate>Thu, 05 Oct 2017 23:59:40 +0800</pubDate>
      
      <guid>https://ramaxlo.github.io/blog/post/x1c-opensuse-leap-install/</guid>
      <description>入手 x1c 之後，接下來的重要步驟就是要安裝系統。不例外，我們就是要在上面安裝 openSUSE Leap。以下小節會詳述安裝時遇到的一些問題與解決方法。
調整磁碟分割表為 msdos 類型 由於 x1c 預裝系統是 Windows 10，我沒打算設定雙系統開機，所以我在安裝前先進入 BIOS，把 secure boot 以及 UEFI 關閉，改用 legacy boot。安裝完後發現 BIOS 無法正確地從 MBR 開機。搞了半天才發現，legacy boot 只支援 msdos 類型的分割表，它看不懂 GPT 類型的分割表。是故又重新分割了一次磁碟才能正常開機。
電源管理不正常 x1c 配備的是 i7-7500U，為第七代的 Core i CPU，openSUSE Leap 42.3 的預設 4.4 版核心似乎不能很好地支援這個較新的 CPU，以致於雖然可以正常休眠，但是從休眠狀態回復後再關機，就會發生關機不完全的現象；雖然電源燈是關閉的，但仍能感覺機身並沒有降溫的傾向；再次按電源鍵要開機，卻發現再也開不起來，結果被迫要用迴紋針去戳機背的 reset 鍵才會回復正常。搜尋了網上論壇發現有網友建議在 x1c 上安裝 Linux，最好核心要升級到 4.12 以上，驅動程式的支援才會比較完整。所以就立馬升級核心到最新的 4.13，果然問題就解決了。
原本正常來說，升級核心需要自行下載核心原始碼來編譯；不過 openSUSE 在 OBS 上已經有 Factory 套件庫可供安裝最新版本的核心，所以只需加入新套件庫後就可以安裝。
升級步驟如下：
sudo zypper ar https://download.opensuse.org/repositories/Kernel:/stable/standard/ kernel-stable sudo zypper ref kernel-stable sudo zypper in kernel-default Trackpad 中鍵無作用 也許是因為 x1c 的觸控板是比較新的硬體，openSUSE Leap 42.</description>
    </item>
    
    <item>
      <title>入手 ThinkPad X1 Carbon gen 5</title>
      <link>https://ramaxlo.github.io/blog/post/x1c-gen5/</link>
      <pubDate>Wed, 04 Oct 2017 15:19:21 +0800</pubDate>
      
      <guid>https://ramaxlo.github.io/blog/post/x1c-gen5/</guid>
      <description>從工作到現在，過去用過的、加上現在正在使用中的筆電共有四款，其中二款是中國製的、二款是日本製的。和中國製的比較起來，日本製的產品確實是比較耐用；其中有一台已經用了近 10 年，除了風扇因老化而自行替換外，就沒再出現過其他問題。當然也有人說日本製的也是會買到機王，不過至少我目前還沒遇到過，因此我對於日本製的筆電一直有很好的印象，而這也反映在我挑選筆電的考量要素中。在買筆電前，我都會先去找找看有沒有日本製的型號，再來才是看價格。然而在台灣還有在賣日本製筆電的品牌寥寥可數，且價格高不可攀，令人望之卻步。
由於目前工作用的機器是 ThinkPad T450，雖然是中國製的，不過使用起來感覺還算不錯，鍵盤好打，也算是容易安裝 Linux 系統，因此當女友想換新筆電的時候，我第一個想到的就是 ThinkPad。有一天在偶然的情況下逛到了 Lenovo JP 的官網，赫然發現竟然有出所謂「米沢生產」的 ThinkPad X1 Carbon，而且在折扣時段的價錢竟然比在台灣買還要便宜了約台幣 1 萬元，當下和女友討論後就決定找代購來下訂了。
之前一直以為 Lenovo 的筆電都是在中國生產，不過查了資料後發現 Lenovo 在 2015 年就開始在日本小批量生產部分的高階機型，x1c 就是其中之一。拿到貨後，可以在外包裝箱上看到印著「米沢生產」的字樣。這裡的「米沢」指的是 NEC 在山形縣的米澤工廠 (影片介紹)，同時這裡也是 LaVie 系列筆電的生產地。也許有人會覺得，啊料不都是一樣嗎，由誰來組裝有什麼差別？我個人以為差別可能就是差在 QA 這一塊，把關的比較嚴謹，抽到機王的機率也會比較低吧…
至於這台中國品牌、日本製造的筆電，是否也和日本品牌、日本製造的一樣耐操，就讓時間來解答吧。</description>
    </item>
    
    <item>
      <title>Install VyOS on APU2</title>
      <link>https://ramaxlo.github.io/blog/post/vyos-on-apu2/</link>
      <pubDate>Sat, 08 Jul 2017 13:49:38 +0800</pubDate>
      
      <guid>https://ramaxlo.github.io/blog/post/vyos-on-apu2/</guid>
      <description>由於之前把玩 RouterBoard 的經驗，讓我還想再找找看有沒有其他軟路由的替代方案。原因主要是因為 RouterOS 雖然也是 Linux based 的系統，但只有 base system 是開源軟體，其他 MikroTik 開發的應用程式仍然還是封閉軟體。雖然它的效能也很不錯，設定上也非常有彈性，也很穩定，但對於一個已經用慣 FOSS 的人來說，心裡還是有些疙瘩。
在網路上尋尋覓覓一陣子，發現蠻多網友使用 PC Engines 的嵌入式 x86 主板 APU2 上跑 pfSense 這個 BSD based 的防火牆軟體。看一下硬體規格，有三張 intel Gb 網卡，價格 125 美金，還可以加購外殼，其他配件加起來大約台幣 5000 出頭吧，比起其他廠牌類似規格的要便宜許多，於是就下單訂了一台。
出貨後等了約莫二個禮拜才送到。在這段期間，我開始思考應該裝什麼系統才好。我不太想裝 pfSense，我想找看看有沒有 Linux based 的軟路由可以安裝；IPFire 是其中還蠻有名的開源專案，也是透過 Web 介面來設定，不過感覺好像也沒什麼特別的地方；後來找到了另外一個專案 VyOS，它有個很特別的東西讓我眼睛一亮：它不提供 Web 介面，所有的設定都必須要透過 CLI 完成；它提供了類似於 Cisco ios 的 shell 來設定網路。稍微看了 wiki 文件後，就決定要來安裝它了。
上網搜尋一下才發現，似乎很少人在 APU2 上面安裝 VyOS，大部分不是裝 pfSense 就是裝 Ubuntu；比較有關的只有這篇文章，但這個也是安裝在前一代的產品上，並非 APU2；心想如果要裝上去，看來得要和機器奮戰一陣子了。
APU2 這塊板子也很特別，很多市面上賣的 x86 路由器都會提供 VGA port，偏偏 APU2 只提供 serial port，這意味著安裝程式必須要支援 serial console，而非僅僅 graphic console。所幸目前看到的軟路由安裝程式皆已考慮到這點，兩者都有支援，VyOS 自然也支援 serial console。不過它是寫死 9600 baud，然而 APU2 似乎只支援 115200，這會造成開機時無法顯示開機選單，於是我花了不少時間在修改 VyOS iso 映像檔內的 baud rate 設定。</description>
    </item>
    
    <item>
      <title>轉移網路到 RouterBoard</title>
      <link>https://ramaxlo.github.io/blog/post/transfer-to-routerboard/</link>
      <pubDate>Sat, 25 Mar 2017 03:56:51 +0800</pubDate>
      
      <guid>https://ramaxlo.github.io/blog/post/transfer-to-routerboard/</guid>
      <description>換到新辦公室也有一段時日了，對我們這些以網路為主要開發環境的公司來說，搬家後的第一件事就是要重新架設網路，這非常重要，沒有網路根本就沒法工作。
原本接到數據機的是一台 ASUS 的無線網路分享器，但因為機房距離辦公區域過遠，訊號品質不佳，故上網 google 一下看有沒有大品牌又便宜一點的專用路由器來取代分享器；然後就看到一款 Netgear 的路由器，價錢還算 ok，就買了下去。好不容易架好網路後沒多久，同事們紛紛哀嚎網路很慢常常斷線，我心裡想說應該不太可能是 router 的問題吧…結果實際去測速後，幹真的是路由器的問題，上下傳最快只能到 30~40 Mbps，公司買的 300M 網路不就浪費掉了…後來就緊急把舊的分享器再放回去擋一下，後續再設法解決。
到這時我才發現，原來並不是所有的路由器都能支援 300M 以上的頻寬，於是又再上網找有無合適的產品。網上論壇倒是有不少網友推薦某幾個品牌的路由器，不過都不算便宜…只是在討論串中不斷看到 RouterOS 的字眼，心想這是什麼東西，感覺大家都很推崇，可是都說不好上手…阿到底是有多不好上手，懷著好奇的心理又繼續找，看到一個拍賣賣家正在賣 RB850Gx2，宣稱可以支援 300M 網路，看起來似乎蠻屌的，又不算貴，手一滑就買了一個回來測試。
下載 winbox 後連上路由器發現，嗯…設定是真的有點小複雜，參考賣家送的電子書和網路上的 Wiki 後，才大略知道該如何做設定，並不像市面上消費用的分享器，只要填一下基本資訊就可以架好網路。當然賣家是很貼心地幫你設好一些基本的設定，讓你可以只填入 PPPoE 帳密就可以連上網，但你若想加一些防火牆設定，例如 port forwarding，勢必得要先去了解 RouterOS 內部的封包處理流程才行。好在 RouterOS 也是 Linux-based 的系統，同樣也是用 netfilter 實作防火牆，對於過去用過 iptables 的人來說，會有種熟悉的感覺，應該不會太難設定。
然後基本的上網設定弄完了，我又花了時間再切一個網段出來當作 guest network，然後再加防火牆規則限制連線，接著再花時間研究怎麼限流，弄好了以後，我又在研究怎麼標記封包來做 QoS，然後為了要自動把某些新上線的機器加入群組，又開始研究怎麼寫 script…是的，你可以在 RouterOS 上寫 script，還可以設定排程來執行這些 script…這真是太神奇了……
這樣玩一輪下來，我覺得 RouterOS 是一個非常有彈性的路由軟體，幾乎都能做到你想做的網路設定，非常適合給具備網路知識的人來使用，專業網管自然不在話下。不過對一般使用者，它的學習曲線就會很陡峭，難以上手。無怪乎 pchome 幾乎沒賣這類產品，討論的網友似乎也很小眾…
阿，忘了提測速的結果，在接有線網路的情況下，網速直逼公司的頻寬上限，比那 Netgear 好太多了…</description>
    </item>
    
    <item>
      <title>掌控你的電腦的自由</title>
      <link>https://ramaxlo.github.io/blog/post/freedom-controlling-your-machine/</link>
      <pubDate>Mon, 16 Jan 2017 02:17:56 +0800</pubDate>
      
      <guid>https://ramaxlo.github.io/blog/post/freedom-controlling-your-machine/</guid>
      <description>最近觀摩了一下同事所寫的 Ansible playbook，能夠自動啟動多個 AWS EC2 實體，果然精妙。當中討論到為何在某個設定為何要把 Python 的路徑設為 /usr/local/bin/python，而非一般的 /usr/bin/python 時，同事回答說因為 Mac OS 的 Python 版本太舊，無法跑某些 task，不這樣設的話，Ansible 預設只會用 Mac OS 的版本。然後我就很白目地問了：
 為什麼不把 /usr/bin/python 砍掉，然後建一個 symlink 指向新版本？
 身為一個 Linux 的使用者，會做這樣類似的事情是很正常的；例如在安裝完 ubuntu 後，我習慣會把 /bin/sh 砍掉，重新指向到 /bin/bash。但是同事回我說不行，在 Mac OS 下，你不能動 /usr/bin 目錄下的內容，即使你是 root 也不行。
蛤？？？我沒聽錯吧？
後來查了一下，原來這招叫做 System Integrity Protection。
我可以理解，這樣做的原因是為了安全性考量，如果是一般不懂資安的使用者，那也就算了；但對於 power user 而言，大家都是專業人士，這樣做我只覺得不可思議。我了解我在做什麼事情，我也體認到會有什麼樣的風險，也取得 root 權限了，我要對我的電腦做什麼事是我的自由，為何要剝奪我的自由？
固然資安非常重要，但根本之道應該是要教育使用者要有資安意識；身為你所購買電腦的主人，你有責任要維持電腦的正常運作不是嗎？要經常安裝重大安全性更新，不隨便亂執行來路不明的軟體，不隨便亂點奇怪的網站……這樣才能讓你的電腦永保安康；而不是硬生生地直接把使用者掌控電腦的權力拿掉，這根本是因噎廢食的作法。若使用者缺乏正確的觀念，你限制再多也無法阻止電腦被駭客入侵。</description>
    </item>
    
    <item>
      <title>Add M.2 SSD For T450</title>
      <link>https://ramaxlo.github.io/blog/post/t450-add-ssd/</link>
      <pubDate>Wed, 11 Jan 2017 23:58:08 +0800</pubDate>
      
      <guid>https://ramaxlo.github.io/blog/post/t450-add-ssd/</guid>
      <description>2016 年的最後一天，大家都要去跨年，但是我沒去。在這一年將要結束的這一天，我決定要幫我的 Lenovo T450 擴充硬碟空間，並且要在安裝後還能夠恢復原來的工作環境。這是一個大工程，值得我用一天的時間好好地搞一搞。
根據 Lenovo 的硬體維護手冊，T450 有二個 M.2 插槽；其中一個已被 Wifi 網卡使用，另一個則原本是供 WWAN 使用，但若未購買搭 WWAN 的機器，就會多出一個插槽可供利用。另外需要注意的是，M.2 介面的 SSD 有二種通訊協定規格，一個是 SATA，另一個是 PCIe，並不是所有的筆電都支援這二種協定，故購買前一定要先上網查清楚，以免白花錢。又還有一點要注意，就算你確定了通訊協定規格，也不是所有廠商的 SSD 都可以和你的筆電相容，多查查網上的討論串，儘可能買有成功案例的廠牌會比較保險些。總之 M.2 SSD 就是這麼麻煩的東西。
有興趣的人可以參考這個連結了解更多關於 M.2 SSD 的細節。
好啦，買好了 SSD，也順利地安裝上去（硬體安裝步驟略過不提），打開筆電開關，BIOS 也順利抓到了硬體，接下來才是工程的主要部分：搬移系統檔案，設定以 SSD 為開機硬碟。以下將大略走一下執行步驟。
準備工作   下載 openSUSE 開機映象檔，寫入到 USB 隨身碟中：
sudo dd if=openSUSE-Leap-42.2-DVD-x86_64.iso of=/dev/sdX bs=1M 當然你也可以用其他的 Linux 開機映象檔，只要有具備救援模式功能即可。
  備份你的系統。BJ4
  開始搬移 首先用 USB 隨身碟開機，選擇救援模式，進入到命令列模式，然後分割 SSD 並且格式化：
fdisk /dev/sdX mkfs.ext4 /dev/sdX1 接著將原系統磁區掛載到 /tmp/root, SSD 磁區掛載到 /tmp/root2：</description>
    </item>
    
    <item>
      <title>The First Post</title>
      <link>https://ramaxlo.github.io/blog/post/first/</link>
      <pubDate>Mon, 09 Jan 2017 23:11:44 +0800</pubDate>
      
      <guid>https://ramaxlo.github.io/blog/post/first/</guid>
      <description>這是第一篇文章，用 Hugo 產生，搭配 Hemingway 主題。</description>
    </item>
    
  </channel>
</rss>